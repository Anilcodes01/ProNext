generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  bio       String?
  city      String?
  website   String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts     Post[]
  articles  Article[]
  likes     Like[]
  comments  Comment[]
  bookmarks Bookmark[]
  polls     Poll[]
  pollVotes PollVote[]
}

model Post {
  id        String     @id @default(uuid())
  content   String?
  image     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  likes     Like[]
  comments  Comment[]
  bookmarks Bookmark[]
}

model Article {
  id          String   @id @default(uuid())
  title       String
  description String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Like {
  id     String @id @default(uuid())
  postId String
  post   Post   @relation(fields: [postId], references: [id])
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String?
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Bookmark {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model Poll {
  id        String       @id @default(cuid())
  question  String
  options   PollOption[]
  creator   User         @relation(fields: [creatorId], references: [id])
  creatorId String
  createdAt DateTime     @default(now())
}

model PollOption {
  id          String     @id @default(cuid())
  text        String
  votesNumber Int        @default(0)
  poll        Poll       @relation(fields: [pollId], references: [id])
  pollId      String
  votes       PollVote[]
}

model PollVote {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  option    PollOption @relation(fields: [optionId], references: [id])
  optionId  String
  createdAt DateTime   @default(now())
}
